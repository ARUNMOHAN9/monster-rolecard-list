{"version":3,"sources":["components/card/card.module.css","components/searchbar/searchbar.module.css","components/cardlist/cardlist.module.css","components/card/card.jsx","components/searchbar/searchbar.jsx","components/cardlist/cardlist.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Card","name","email","id","className","cardStyle","card","image","src","alt","details","emailId","SearchBar","props","searchCss","searchWrapper","type","onChange","handleSearch","placeholder","CardList","state","users","searchTerm","e","setState","target","value","toLowerCase","fetch","then","res","json","filterList","this","filter","user","includes","cardList","map","key","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"sGACAA,EAAOC,QAAU,CAAC,KAAO,mBAAmB,MAAQ,oBAAoB,QAAU,wB,qBCAlFD,EAAOC,QAAU,CAAC,cAAgB,mC,gBCAlCD,EAAOC,QAAU,CAAC,SAAW,6B,qNCkBdC,EAfF,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,GACzB,OACI,yBAAKC,UAAWC,IAAUC,MACtB,yBAAKF,UAAWC,IAAUE,OACtB,yBAAKC,IAAK,wBAAwBL,EAAG,YAAaM,IAAI,MAE1D,yBAAKL,UAAWC,IAAUK,SACtB,yBAAKN,UAAWC,IAAUJ,MAAOA,GACjC,yBAAKG,UAAWC,IAAUM,SAAUT,M,gBCDrCU,EAPG,SAACC,GACf,OACI,2BAAOT,UAAWU,IAAUC,cAAeC,KAAK,SAASC,SAAUJ,EAAMK,aAAcC,YAAY,+B,gBC+B5FC,E,2MA5BXC,MAAQ,CACJC,MAAO,GACPC,WAAY,I,EAShBL,aAAe,SAACM,GACZ,EAAKC,SAAS,CAACF,WAAYC,EAAEE,OAAOC,MAAMC,iB,mFAPzB,IAAD,OAChBC,MAAM,8CACDC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAAAR,GAAK,OAAI,EAAKG,SAAS,CAAEH,MAAOA,S,+BAOpC,IAAD,OACCW,EAAaC,KAAKb,MAAMC,MAAMa,QAAQ,SAAAC,GAAI,OAAKA,EAAKnC,KAAOmC,EAAKzB,SAASiB,cAAcS,SAAS,EAAKhB,MAAME,eACjH,OACI,oCACI,6BAAK,kBAAC,EAAD,CAAWL,aAAc,SAACM,GAAD,OAAO,EAAKN,aAAaM,OACvD,yBAAKpB,UAAWkC,IAASA,UACpBL,EAAWM,KAAI,SAAAH,GAAI,OAAI,kBAAC,EAAD,CAAMI,IAAKJ,EAAKjC,GAAIF,KAAMmC,EAAKnC,KAAMC,MAAOkC,EAAKlC,MAAOC,GAAIiC,EAAKjC,c,GAvBtFsC,IAAMC,WCMdC,MARf,WACE,OACE,yBAAKvC,UAAU,OACb,kBAAC,EAAD,QCIcwC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBzB,MAAK,SAAA0B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.048d6aa8.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"card_card__2BNh_\",\"image\":\"card_image__2FM3J\",\"details\":\"card_details__30SC4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"searchWrapper\":\"searchbar_searchWrapper__ScWda\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"cardList\":\"cardlist_cardList__1m3so\"};","import React from 'react';\r\n\r\nimport cardStyle from './card.module.css';\r\n\r\nconst Card = ({ name, email, id }) => {\r\n    return (\r\n        <div className={cardStyle.card}>\r\n            <div className={cardStyle.image}>\r\n                <img src={\"https://robohash.org/\"+id+\"?set=set1\"} alt=\"\" />\r\n            </div>\r\n            <div className={cardStyle.details}>\r\n                <div className={cardStyle.name}>{name}</div>\r\n                <div className={cardStyle.emailId}>{email}</div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default Card;","import React from 'react';\r\n\r\nimport searchCss from '../searchbar/searchbar.module.css';\r\n\r\nconst SearchBar = (props) => {\r\n    return (\r\n        <input className={searchCss.searchWrapper} type=\"search\" onChange={props.handleSearch} placeholder=\"What are you looking for?\" />\r\n    );\r\n}\r\n\r\n\r\nexport default SearchBar;","import React from 'react';\r\n\r\nimport Card from '../card/card';\r\nimport SearchBar from '../searchbar/searchbar';\r\n\r\nimport cardList from './cardlist.module.css';\r\n\r\nclass CardList extends React.Component {\r\n\r\n    state = {\r\n        users: [],\r\n        searchTerm: ''\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n            .then((res) => res.json())\r\n            .then(users => this.setState({ users: users }));\r\n    }\r\n\r\n    handleSearch = (e) => {\r\n        this.setState({searchTerm: e.target.value.toLowerCase()});\r\n    }\r\n\r\n    render() {\r\n        const filterList = this.state.users.filter( user => (user.name + user.emailId).toLowerCase().includes(this.state.searchTerm));\r\n        return (\r\n            <>\r\n                <div><SearchBar handleSearch={(e) => this.handleSearch(e)} /></div>\r\n                <div className={cardList.cardList}>\r\n                    {filterList.map(user => <Card key={user.id} name={user.name} email={user.email} id={user.id} />)}\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CardList;","import React from 'react';\nimport './App.css';\n\nimport CardList from './components/cardlist/cardlist';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <CardList/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}